import re

class VulnerabilityChecker:
    def check(self, page):
        raise NotImplementedError

class XSSChecker(VulnerabilityChecker):
    def check(self, page):
        vulnerabilities = []
        xss_patterns = [
            r'<script>.*?</script>',
            r'on\w+=".*?"',
            r'javascript:'
        ]
        for pattern in xss_patterns:
            if re.search(pattern, page['content'], re.IGNORECASE):
                vulnerabilities.append({
                    'type': 'XSS',
                    'url': page['url'],
                    'description': f'Potential XSS vulnerability found: {pattern}'
                })
        return vulnerabilities

class SQLInjectionChecker(VulnerabilityChecker):
    def check(self, page):
        vulnerabilities = []
        sqli_patterns = [
            r"'.*?'",
            r'".*?"',
            r'\b(UNION|SELECT|INSERT|UPDATE|DELETE|DROP)\b'
        ]
        for pattern in sqli_patterns:
            if re.search(pattern, page['content'], re.IGNORECASE):
                vulnerabilities.append({
                    'type': 'SQL Injection',
                    'url': page['url'],
                    'description': f'Potential SQL Injection vulnerability found: {pattern}'
                })
        return vulnerabilities

class InsecureDirectObjectReferenceChecker(VulnerabilityChecker):
    def check(self, page):
        vulnerabilities = []
        idor_patterns = [
            r'\bid=\d+\b',
            r'\buser_id=\d+\b',
            r'\bfile=\w+\.\w+'
        ]
        for pattern in idor_patterns:
            if re.search(pattern, page['content'], re.IGNORECASE):
                vulnerabilities.append({
                    'type': 'Insecure Direct Object Reference',
                    'url': page['url'],
                    'description': f'Potential IDOR vulnerability found: {pattern}'
                })
        return vulnerabilities